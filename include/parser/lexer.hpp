/*
 * Rho - A math sandbox.
 * Copyright (C) 2014 Jacob Zhitomirsky
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _RHO__PARSER__LEXER__H_
#define _RHO__PARSER__LEXER__H_

#include <vector>
#include <istream>


namespace rho {
  
  // forward decs:
  class error_tracker;  
  
  
  enum token_type
  {
    TOK_INVALID,
    TOK_EOF,
    
    // punctuation:
    TOK_LPAREN_LIST,      // '(
    TOK_LBRACE_SET,       // ${
    TOK_LBRACE,           // {
    TOK_RBRACE,           // }
    TOK_LPAREN,           // (
    TOK_RPAREN,           // )
    TOK_LBRACKET,         // [
    TOK_RBRACKET,         // ]
    TOK_DCOL,             // ::
    TOK_SCOL,             // ;
    TOK_CARET,            // ^
    TOK_COMMA,            // ,
    TOK_BANG,             // !
    TOK_BLOCKIFY,         // {:
    TOK_PARENIFY,         // (:
    TOK_RARROW,           // <-
    TOK_RANGE,            // ..
    TOK_SUBST,            // |.
    TOK_THIS_FUNC,        // $$
    
    // operators:
    TOK_ASSIGN,           // =
    TOK_ADD,              // +
    TOK_SUB,              // -
    TOK_MUL,              // *
    TOK_DIV,              // /
    TOK_IDIV,             // //
    TOK_MOD,              // %
    TOK_EQ,               // ==
    TOK_NEQ,              // =/=
    TOK_LT,               // <
    TOK_LTE,              // <=
    TOK_GT,               // >
    TOK_GTE,              // >=
    TOK_N,                // N:
    
    // datums:
    TOK_NIL,
    TOK_IDENT,
    TOK_INTEGER,
    TOK_REAL,
    TOK_SYM,
    
    // keywords:
    TOK_LET,
    TOK_FUN,
    TOK_IF,
    TOK_THEN,
    TOK_ELSE,
    TOK_OTHERWISE,
    TOK_SUM,
    TOK_PRODUCT,
    
    // data types:
    TOK_INT,
    TOK_SET,
  };
  
  
  /* 
   * A single lexeme.
   */
  struct token
  {
    token_type type;
    union
      {
        char *str;      // dynamically allocated
      } val;
    
    int ln, col;
    int len;
  };
  
  
  /* 
   * The primary means to iterate through tokens generated by the lexer.
   */
  class token_stream
  {
    friend class lexer;
    
    const std::vector<token>& toks;
    int pos;
    
  private:
    token_stream (const std::vector<token>& toks);
    
  public:
    bool has_next ();
    token next ();
    token peek_next ();
    
    bool has_prev ();
    token prev ();
    token peek_prev ();
  };
  
  
  
  /* 
   * The token generator.
   * Given a stream of characters, the lexer outputs a sequence of tokens that
   * represent the code in a way that is easier to handle for the parser. 
   */
  class lexer
  {
    std::vector<token> toks;
    error_tracker& errs;
    
  public:
    lexer (error_tracker& errs);
    ~lexer ();
    
  public: 
    /* 
     * Generates a sequence of tokens from the specified character stream.
     * The file name is used for error-tracking purposes.
     */
    void tokenize (std::istream& strm, const std::string& file_name);
    
    
    /* 
     * Returns a stream with all the generated tokens.
     */
    token_stream get_tokens ();
  };
}

#endif

